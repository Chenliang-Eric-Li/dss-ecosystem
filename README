DSS client library:

Platform requirements: CentOS 7.x, gcc that fully supports C++11, cmake 3.13 or above
					   Python 3.8 (3.6 and 3.7 are probably ok but not verfied) 
Library dependencies: aws-cpp-sdk with core, S3 services enabled, pybind11, python3-config

In source code tree, there is a build.sh can be used as reference to build dss client lib which
consists of C++ libdss.so file and a dss.cpython-XXXXXX.so which provides python interface
under ./build directory.

To validate the python extension, start python shell and run
 >>> import dss
 >>> print(help(dss))
and you should be able see a list of classes offered by dss

***************
     Run
***************

There is test/example.py that can used to verify your build and also serve as
an example for the client APIs. It uploads, lists then downloads example.py
as a test file against S3 store. In this case, the S3 store can be a stock minio
or DSS cluster.

Note: Before the run, you need to config S3 endpoint in the header section of the file,
e.g.
access_key = "minioadmin"
access_secret = "minioadmin"
discover_endpoint = 'http://127.0.0.1:9001'

If you are working with a new dss clusters, you need to prime one of the cluster
to contain a cluster config file for dss client to discover clustering topology. In order
to do it, pick a cluster to create a bucket named "dss" and upload a file named "conf.json"
to it. See conf.json in the source tree as example.

***************
    Debug
***************
To enable aws-cpp-sdk logging, set env var DSS_AWS_LOG to the range between 0 and 6
enum class LogLevel : int
{
	Off = 0,
	Fatal = 1,
	Error = 2,
	Warn = 3,
	Info = 4,
	Debug = 5,
	Trace = 6
};

In case you need to run client lib in multiple processes, you can direct each client
process to have it's own aws log file name using env var DSS_AWS_LOG_FILENAME.

To enable dss logging, set env var DSS_DEBUG to the source file names seperated by
comma, e.g. DSS_DEBUG=/path/to/src/dss_client.cpp python3 test/test.py

To feed conf.json from local filesystem, set env var DSS_CONFIG_FILE to the path
pointing to the config file
e.g. DSS_CONFIG_FILE=/root/jerry/dss_client/conf.jso python3 test/example.py 

Setup build enviroment:

The easiest way to setup the build env is to use Anaconda, and thru it you can
use conda install gcc, cmake and etc..

Install Anaconda:
wget https://repo.anaconda.com/archive/Anaconda3-2020.11-Linux-x86_64.sh
chmod +x Anaconda3-2020.11-Linux-x86_64.sh
./Anaconda3-2020.11-Linux-x86_64.sh

Regardless of how you setup toolchain, you will need pybind11 and aws-cpp-sdk

Install pybind11
sudo pip3 install pybind11

If you don't have a ready to use aws-cpp-sdk rpm, you can build it yourself

Build aws-cpp-sdk:
yum install libcurl-devel openssl-devel libuuid-devel pulseaudio-libs-devel
git clone https://github.com/aws/aws-sdk-cpp.git
git checkout 1.8.99
mkdir build
cd build
cmake ../ -DCMAKE_CXX_COMPILER=/opt/gcc/bin/g++ -DCMAKE_BUILD_TYPE=Release -DBUILD_ONLY="s3"
make
sudo make install

Or if you can't use Anaconda, you can build gcc and cmake by youself

# install deps
sudo yum install -y git libmpc-devel mpfr-devel gmp-devel zlib-devel gcc gcc-c++ openssl-devel libcurl-devel libuuid-devel pulseaudio-libs-devel python3 python3-pip python3-devel

# build GCC 9.3.0
git clone https://gcc.gnu.org/git/gcc.git
cd gcc
git checkout releases/gcc-9.3.0
./configure --with-system-zlib --disable-multilib --enable-languages=c,c++ --prefix=/opt/gcc
make -j$(nproc)
sudo make install
sudo sh -c 'echo "/opt/gcc/lib" > /etc/ld.so.conf.d/stdlibc_cxx.conf'
sudo sh -c 'echo "/opt/gcc/lib64" >> /etc/ld.so.conf.d/stdlibc_cxx.conf'
sudo ldconfig

# build cmake 3.18.4
cd ~/
git clone https://gitlab.kitware.com/cmake/cmake.git
cd cmake
git checkout v3.18.4
./bootstrap --prefix=/opt/cmake
gmake
sudo gmake install

# add cmake to path
# such as sed -i 's|^PATH=.*|&:/opt/cmake/bin|g' ~/.bash_profile
# source ~/.bash_profile

# build dss_client
cd ~/
git -c http.sslVerify=false clone https://msl-dc-gitlab.ssi.samsung.com/ssd/dss_client.git
cd dss_client
./build.sh
